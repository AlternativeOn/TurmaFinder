//Versão 1.0
//Program to find what is your class
package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"

	"github.com/gonutz/w32/v2"
	"github.com/ncruces/zenity"
)

type Token struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiresIn    int    `json:"expires_in"`
	TokenType    string `json:"token_type"`
	JSON         string `json:"json"`
}

type Error struct {
	Error            string `json:"error"`
	ErrorDescription string `json:"error_description"`
}

type AutoGenerated []struct {
	Value  string   `json:"value"`
	Label  string   `json:"label"`
	Turmas []Turmas `json:"turmas"`
}
type Turmas struct {
	NomeTurma   string `json:"nomeTurma"`
	TurmaValida bool   `json:"turmaValida"`
	NomeSerie   string `json:"nomeSerie"`
}

func main() {
	//Dialog asking for the username and password
	user, err := zenity.Entry("Qual o seu usuário do Positivo On?", zenity.Title("Descubra sua turma"), zenity.EntryText("Usuário"))
	if err != nil {
		fmt.Println("[i] {username}", err)
		os.Exit(0)
	}
	if user == "" {
		zenity.Error("Usuário não informado", zenity.Title("Erro"), zenity.ErrorIcon)
		fmt.Println("[w] Usuário não informado")
		main()
	}
	_, pass, err := zenity.Password(zenity.Title("Qual a sua senha do Positivo On?"))
	if err != nil {
		fmt.Println("[i] {password}", err)
		os.Exit(0)
	}
	if pass == "" {
		zenity.Error("Senha não informada", zenity.Title("Erro"), zenity.ErrorIcon)
		fmt.Println("[w] Senha não informada")
		main()
	}
	//Do a x-www-form-urlencoded request to https://sso.specomunica.com.br/connect/token using requests package
	token, err := postReq("https://sso.specomunica.com.br/connect/token", "POST", "username="+user+"&password="+pass+"&grant_type=password&client_id=hubpsd&client_secret=DA5730D8-90FF-4A41-BFED-147B8E0E2A08&scope=openid%20offline_access%20integration_info")
	if err != nil {
		fmt.Println("[E] Login falhou", err)
		os.Exit(1)
	}
	//do a GET request to https://apihub.positivoon.com.br/api/NivelEnsino?usuarioId=1485 using bearer token
	turma, err := authReq("https://apihub.positivoon.com.br/api/NivelEnsino?usuarioId=1485", "GET", token)
	if err != nil {
		fmt.Println("[E] Erro ao buscar turma", err)
		os.Exit(1)
	}
	//Unmarshal response

	var turmaAutoGenerated AutoGenerated
	err = json.Unmarshal([]byte(turma), &turmaAutoGenerated)
	if err != nil {
		fmt.Println("[E] Erro ao deserializar", err)
		os.Exit(1)
	}
	//Print nome da turma
	fmt.Println("[i] Sua turma é:", turmaAutoGenerated[0].Value)
	//Print nome da série
	fmt.Println("[i] Sua série é:", turmaAutoGenerated[0].Label)
	//Print nome da turma
	fmt.Println("[i] Sua turma é:", turmaAutoGenerated[0].Turmas[0].NomeTurma)
	//Print nome da série
	fmt.Println("[i] Sua série é:", turmaAutoGenerated[0].Turmas[0].NomeSerie)
	//Print nome da turma
	fmt.Println("[i] Sua turma é:", turmaAutoGenerated[0].Turmas[0].TurmaValida)
	zenity.Info("Sua turma é: "+turmaAutoGenerated[0].Turmas[0].NomeTurma+" ("+turmaAutoGenerated[0].Label+" - "+turmaAutoGenerated[0].Value+""+turmaAutoGenerated[0].Turmas[0].NomeSerie+")", zenity.Title("Sucesso! Sua turma é:"), zenity.InfoIcon)
	//Ask if you want to see another project in github
	openBrowser := zenity.Question("Deseja ver um cliente alternativo ao Positivo On?", zenity.Title("Deseja ver um cliente alternativo ao Positivo On?"), zenity.QuestionIcon)
	switch {
	case openBrowser != zenity.ErrCanceled:
		//Open link in browser
		err := w32.ShellExecute(0, "open", "https://github.com/PrincessMortix/AlternativeOn", "", "", w32.SW_SHOW)
		if err != nil {
			fmt.Println("[E]", err)
		}
	default:
		os.Exit(0)
	}

}

func postReq(url string, method string, payload string) (string, error) {

	client := &http.Client{}
	fmt.Println("[d | postReq] Payload:", payload)
	req, err := http.NewRequest(method, url, strings.NewReader(payload))

	if err != nil {
		fmt.Println("[e | postReq]", err)
		return "Failed to create request:", err
	}
	req.Header.Add("Content-Type", "application/x-www-form-urlencoded")

	res, err := client.Do(req)
	if err != nil {
		fmt.Println("[e | postReq]", err)
		return "Failed to send request: ", err
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println("[e | postReq]", err)
		return "Failed to read response: ", err
	}

	//fmt.Println("[d] Response:", string(body))
	//Check if response is valid
	if res.StatusCode != 200 {
		//Unmarshal error response
		var errResp Error
		json.Unmarshal(body, &errResp)
		fmt.Println("[e | postReq] Error:", errResp.Error)
		fmt.Println("[e | postReq] Error description:", errResp.ErrorDescription)
		zenity.Error(errResp.ErrorDescription, zenity.Title("Erro"), zenity.ErrorIcon)
		return errResp.Error + ": " + errResp.ErrorDescription, err
	}
	//Unmarshal response
	var token Token
	json.Unmarshal(body, &token)
	//convert int to string
	expiresIn := fmt.Sprintf("%d", token.ExpiresIn)
	fmt.Println("[d | postReq] Token: "+token.AccessToken, "\n[d | postReq] Refresh Token: "+token.RefreshToken, "\n[d | postReq] Expires In: "+expiresIn, "\n[d | postReq] Token Type: "+token.TokenType)
	//zenity.Info("Login realizado com sucesso!\n\nIremos agora tentar carregar as soluções...", zenity.Title("Login realizado com sucesso!"), zenity.InfoIcon)
	return token.AccessToken, nil
}

func authReq(url string, method string, token string) (string, error) {

	client := &http.Client{}
	req, err := http.NewRequest(method, url, nil)

	if err != nil {
		return "", err
	}
	req.Header.Add("Authorization", "Bearer "+token)

	res, err := client.Do(req)
	if err != nil {
		fmt.Println("[e | authReq]", err)
		return "", err
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println("[e | authReq]", err)
		return "", err
	}
	return string(body), nil
}
